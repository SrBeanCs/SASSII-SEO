@import url('https://fonts.googleapis.com/css?family=Oswald|Roboto');


@mixin flexbox {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
}

%flexbox { @include flexbox; }

//----------------------------------

@mixin inline-flex {
	display: -webkit-inline-box;
	display: -webkit-inline-flex;
	display: -moz-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
}

%inline-flex { @include inline-flex; }


@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}
	// Shorter version:
	@mixin flex-dir($args...) { @include flex-direction($args...); }


@mixin flex-wrap($value: nowrap) {
	// No Webkit Box fallback.
	-webkit-flex-wrap: $value;
	-moz-flex-wrap: $value;
	@if $value == nowrap {
		-ms-flex-wrap: none;
	} @else { 
		-ms-flex-wrap: $value; 
	}
	flex-wrap: $value;
}


@mixin flex-flow($values: (row nowrap)) {
	// No Webkit Box fallback.
	-webkit-flex-flow: $values;
	-moz-flex-flow: $values;
	-ms-flex-flow: $values;
	flex-flow: $values;
}


@mixin order($int: 0) {
	-webkit-box-ordinal-group: $int + 1;
	-webkit-order: $int;
	-moz-order: $int;
	-ms-flex-order: $int;
	order: $int;
}


@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}


@mixin flex-shrink($int: 1) {
	-webkit-flex-shrink: $int;
	-moz-flex-shrink: $int;
	-ms-flex-negative: $int;
	flex-shrink: $int;
}


@mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	-moz-flex-basis: $value;
	-ms-flex-preferred-size: $value;
	flex-basis: $value;
}


@mixin flex($fg: 1, $fs: null, $fb: null) {
    

	$fg-boxflex: $fg;


	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}

	-webkit-box-flex: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	-moz-box-flex: $fg-boxflex;
	-moz-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}


@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else if $value == space-around {
		-ms-flex-pack: distribute;		
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	-moz-justify-content: $value;
	justify-content: $value;
}
	
	@mixin flex-just($args...) { @include justify-content($args...); }


@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
}


@mixin align-self($value: auto) {
	
	-webkit-align-self: $value;
	-moz-align-self: $value;
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} @else if $value == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}


@mixin align-content($value: stretch) {
	
	-webkit-align-content: $value;
	-moz-align-content: $value;
	@if $value == flex-start {
		-ms-flex-line-pack: start;
	} @else if $value == flex-end {
		-ms-flex-line-pack: end;
	} @else {
		-ms-flex-line-pack: $value;
	}
	align-content: $value;
}


/* RGB */
$color1: rgba(80, 81, 79, 1);
$color2: rgba(242, 95, 92, 1);
$color3: rgba(255, 224, 102, 1);
$color4: rgba(36, 123, 160, 1);
$color5: rgba(112, 193, 179, 1);

body {
  background-color: #f8f8f8;
  font-family: 'Roboto', sans-serif;
  font-size: 16px;
  line-height: 1.5;
  text-rendering: optimizeLegibility !important;
  -webkit-font-smoothing: antialiased !important;
  -moz-osx-font-smoothing: grayscale;
}

h1, h2, h3, h4, h5, h6 {
  font-family: 'Oswald', sans-serif;
}

ul {
  list-style: none;
  padding: 2rem;
  margin: 2rem;
  // border: 1px solid #ccc;
  background-color: rgba( 0, 0, 0, .02);
  @include flexbox();
  @include flex-wrap(wrap);
  @include justify-content(center);
  @include align-items( stretch);
  perspective: 1000px;
  backface-visibility: hidden;
}

li {
  transform-origin: center bottom;
  @include flex(0 0 auto);
  box-sizing: border-box;
  padding: 2rem;
  margin: 0;
  width: 20rem;
  background-color: $color1;
  transition: all 500ms ease-in-out;
  box-shadow: 0px 1px 1px 0px rgba(0,0,0,0.25),
     0px 0px 10rem 0px rgba(0,0,0,0.2) inset;
  // transform: translateZ(0rem) translateY(0rem) rotateX(0);
  z-index: 1;
  color: #fff;
  position: relative;
  perspective: 300px;
  -webkit-backface-visibility: hidden;
    animation: animationFramesBack ease-in-out .5s;
    animation-iteration-count: 1;
    animation-fill-mode: forwards;
    
  &:hover {
    // color: #fff;
    background-color: $color4;
    animation: animationFrames ease-in-out .5s;
    animation-iteration-count: 1;
    animation-fill-mode: forwards;
    
    z-index: 100;
    box-shadow: 0px 2px 20px 0px rgba(0,0,0,0.2),
     0px 0px 5rem 10px rgba(0,0,0,0.2) inset;    
    //transform: scale(1.2);
  }
  

  
  .more {
    -webkit-backface-visibility: hidden;
    color: #fff;
    background-color: lighten( $color1, 10% );
    box-sizing: border-box;
    display: block;
    position: absolute;
    width: 100%;
    top: 100%;
    left: 0;
    padding: .5rem 2rem;
    transform-origin: center top;
    opacity: 0;
    transition: all 500ms ease-in-out;
    transform: translateZ(-0.1rem) translateY(0rem) rotateX(-90deg) scaleY(0);
  }
  &:hover .more {
    background-color: darken( $color4, 10% );
    transform: translateZ(.01rem) translateY(-0.1rem) rotateX(0)  scaleY(1);
    box-shadow: 0px 1px 10px 0px rgba(0,0,0,0.2);
    opacity: 1;
  }
}


progress {
  -webkit-appearance: none;
  appearance: none;

  width: 50%;
  height: .75rem;  
  color: #fff;
}

progress[value]::-webkit-progress-bar {
  background-color: #fff;
  border-radius: 0px;
  border: 1px solid darken( $color4, 15% );
}
progress[value]::-webkit-progress-value {
  background-color: $color2;
  border-radius: 0px;
}

@keyframes flap {
  0% {
    transform: translateZ(-0.1rem) translateY(0rem) rotateX(-90deg) scaleY(0);
  }
  80% {
    transform: translateZ(.01rem) translateY(-0.1rem) rotateX(20deg)  scaleY(1);
  }
  100% {
    transform: translateZ(.01rem) translateY(-0.1rem) rotateX(0)  scaleY(1);
  }
}

@keyframes animationFrames {
  0% {
    transform: translateZ(0rem) translateY(0rem) rotateX(0);
  }
  60% {
    transform: scale(1.1) translateZ(1rem) translateY(4rem) rotateX(-10deg);
  }
  100% {
    transform: scale(1.1) translateZ(1rem) translateY(0rem) rotateX(0deg);
  }
}

@keyframes animationFramesBack {
  0% {
    transform: scale(1.1) translateZ(1rem) translateY(0rem) rotateX(0deg);
  }
  60% {
    transform: scale(1) translateZ(-.5rem) translateY(-4rem) rotateX(10deg);
  }
  100% {
    transform: scale(1) translateZ(0rem) translateY(0rem) rotateX(0);
  }
}

figure.stats {
  margin: 1rem 0;
  padding: 1rem 0;
  border-bottom: 1px solid rgba( 255, 255, 255, .25);
  .value {
    font-family: 'Oswald', sans-serif;
    font-size: 4rem;
    line-height: 4rem;
    font-weight: bold;
    margin: 0 0 .5rem 0;
    padding: 0;
  }
  figcaption {
    margin: 0;
    padding: 0;
    font-size: .85rem;
    p {
      margin: 0;
      padding: 0;
      font-weight: bold;
    }
  }
}



.chart {
  max-width: 250px;
  polyline {
    stroke: $color2;
  }
}

.piechart {
  max-width: 250px;
  circle {
    stroke: $color2;
    fill: $color3;
  }
}













@import url('https://fonts.googleapis.com/css?family=Montserrat');

@mixin flex($just-cont:null, $al-item:null) {
  display: flex;
  justify-content: $just-cont;
  align-items: $al-item;
}

body {
  @include flex(center, center);
  height: 100vh;
}

.wrapper {
  @include flex();
}

.box {
  @include flex(center, center);
  width: 150px;
  height: 100px;
  font-size: 10px;
  margin: 5px;  
  font-family: 'Heebo', sans-serif;
  letter-spacing: 2px;
  text-transform: uppercase;
  color: #333;
  border-radius: 10px;
}

$map: (
  active: (
    background: #848c57,
    width: 150px,
  ),
  disabled: (
    background: #c6d6b0,
    width: 90px,
  ), 
  visited: (
    background: #e6d4a2,
    width: 100px,
  )
);

@each $state, $child-map in $map {
  .#{$state} {
    background-color: map-get($child-map, background);
    width: map-get($child-map, width);
    
    @if $state == active {
      color: white;
    }
  }
}





.btn-a{
    background: #777;
    border: 1px solid #ccc;
    font-size: 1em;
    text-transform: uppercase;
    width: 100px;
    height: 50px;
    float: left;
}
.btn-b{
    @extend .btn-a;
    background: #ff0;
}
